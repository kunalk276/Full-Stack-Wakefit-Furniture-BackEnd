package com.wakefit.ecommerce.serviceimplement;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wakefit.ecommerce.entity.Category;
import com.wakefit.ecommerce.entity.Product;
import com.wakefit.ecommerce.repository.CategoryRepository;
import com.wakefit.ecommerce.repository.ProductRepository;
import com.wakefit.ecommerce.service.ProductService;

import java.util.List;
import java.util.Optional;

@Service
public class ProductServiceImpl implements ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Override
    public Product addProduct(Product product) {
        if (product.getCategory() != null && product.getCategory().getCategoryId() != null) {
            Optional<Category> categoryOpt = categoryRepository.findById(product.getCategory().getCategoryId());
            if (categoryOpt.isPresent()) {
                product.setCategory(categoryOpt.get());
            } else {
                // Handle category not found, e.g., by logging or setting a default category
                // For simplicity, setting category to null or handling it as needed
                product.setCategory(null);
            }
        }
        return productRepository.save(product);
    }

    @Override
    public Product getProductById(Long productId) {
        return productRepository.findById(productId).orElse(null);
    }

    @Override
    public Product updateProduct(Product updatedProduct) {
        Long productId = updatedProduct.getProductId();
        Optional<Product> existingProductOpt = productRepository.findById(productId);

        if (existingProductOpt.isPresent()) {
            Product existingProduct = existingProductOpt.get();
            existingProduct.setName(updatedProduct.getName());
            existingProduct.setDescription(updatedProduct.getDescription());
            existingProduct.setPrice(updatedProduct.getPrice());
            existingProduct.setImages(updatedProduct.getImages());
            existingProduct.setStockQuantity(updatedProduct.getStockQuantity());

            if (updatedProduct.getCategory() != null && updatedProduct.getCategory().getCategoryId() != null) {
                Optional<Category> categoryOpt = categoryRepository.findById(updatedProduct.getCategory().getCategoryId());
                if (categoryOpt.isPresent()) {
                    existingProduct.setCategory(categoryOpt.get());
                } else {
                    // Handle category not found, e.g., by logging or setting a default category
                    existingProduct.setCategory(null);
                }
            }

            return productRepository.save(existingProduct);
        } else {
            // Handle product not found, e.g., by returning null or default value
            return null;
        }
    }

    @Override
    public void deleteProduct(Long productId) {
        if (productRepository.existsById(productId)) {
            productRepository.deleteById(productId);
        } else {
            // Handle product not found, e.g., by logging or ignoring
        }
    }

    @Override
    public List<Product> findAll() {
        return productRepository.findAll();
    }

    @Override
    public List<Product> searchProductsByName(String name) {
        return productRepository.findByNameContainingIgnoreCase(name);
    }

    @Override
    public List<Product> getProductsByCategory(Long categoryId) {
        return productRepository.findByCategory_CategoryId(categoryId);
    }

    @Override
    public Product addProductToCategory(Long productId, Long categoryId) {
        Product product = getProductById(productId);
        if (product != null) {
            Optional<Category> categoryOpt = categoryRepository.findById(categoryId);
            if (categoryOpt.isPresent()) {
                product.setCategory(categoryOpt.get());
                return productRepository.save(product);
            } else {
                // Handle category not found, e.g., by logging or ignoring
                return null;
            }
        } else {
            // Handle product not found, e.g., by returning null or default value
            return null;
        }
    }
}
