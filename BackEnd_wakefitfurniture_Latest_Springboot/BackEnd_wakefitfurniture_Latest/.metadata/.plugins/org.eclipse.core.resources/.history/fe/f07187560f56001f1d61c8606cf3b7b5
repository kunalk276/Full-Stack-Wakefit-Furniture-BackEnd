package com.wakefit.ecommerce.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.wakefit.ecommerce.dto.ProductDTO;
import com.wakefit.ecommerce.entity.Category;
import com.wakefit.ecommerce.entity.Product;
import com.wakefit.ecommerce.service.CategoryService;
import com.wakefit.ecommerce.service.ProductService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v3")
public class ProductController {

    @Autowired
    private ProductService productService;

    @Autowired
    private CategoryService categoryService;

    @PostMapping("/products")
    public ResponseEntity<ProductDTO> createProduct(@RequestBody ProductDTO productDTO) {
        Category category = categoryService.getCategoryById(productDTO.getCategoryId());

        if (category == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST); // Invalid category ID
        }

        Product product = convertToEntity(productDTO);
        product.setCategory(category);
        Product savedProduct = productService.addProduct(product);

        return new ResponseEntity<>(convertToDTO(savedProduct), HttpStatus.CREATED);
    }

    @GetMapping("/products/{productId}")
    public ResponseEntity<ProductDTO> getProductById(@PathVariable Long productId) {
        Product product = productService.getProductById(productId);
        if (product == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Return 404 Not Found if product does not exist
        }
        return new ResponseEntity<>(convertToDTO(product), HttpStatus.OK);
    }

    @GetMapping("/products")
    public ResponseEntity<List<ProductDTO>> getAllProducts() {
        List<Product> products = productService.findAll();
        List<ProductDTO> productDTOs = products.stream().map(this::convertToDTO).collect(Collectors.toList());
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(productDTOs);
    }

    @PutMapping("/products/{productId}")
    public ResponseEntity<ProductDTO> updateProduct(@PathVariable Long productId, @RequestBody ProductDTO productDTO) {
        Product existingProduct = productService.getProductById(productId);
        if (existingProduct == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); // Return 404 Not Found if product does not exist
        }

        existingProduct.setName(productDTO.getName());
        existingProduct.setDescription(productDTO.getDescription());
        existingProduct.setPrice(productDTO.getPrice());
        existingProduct.setImages(productDTO.getImages());
        existingProduct.setStockQuantity(productDTO.getStockQuantity());

        Category category = categoryService.getCategoryById(productDTO.getCategoryId());
        if (category == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST); // Invalid category ID
        }
        existingProduct.setCategory(category);

        Product updatedProduct = productService.updateProduct(existingProduct);
        return new ResponseEntity<>(convertToDTO(updatedProduct), HttpStatus.OK);
    }

    @DeleteMapping("/products/{productId}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long productId) {
        productService.deleteProduct(productId);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @GetMapping("/products/search")
    public List<ProductDTO> searchProducts(@RequestParam String name) {
        List<Product> products = productService.searchProductsByName(name);
        return products.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @GetMapping("/products/category/{categoryId}")
    public List<ProductDTO> getProductsByCategory(@PathVariable Long categoryId) {
        List<Product> products = productService.getProductsByCategory(categoryId);
        return products.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    private ProductDTO convertToDTO(Product product) {
        return new ProductDTO(product.getProductId(), product.getName(), product.getDescription(),
                product.getPrice(), product.getImages(), product.getStockQuantity(), product.getCategory().getCategoryId());
    }

    private Product convertToEntity(ProductDTO productDTO) {
        return new Product(productDTO.getProductId(), productDTO.getName(), productDTO.getDescription(),
                productDTO.getPrice(), productDTO.getImages(), productDTO.getStockQuantity(), null, productDTO.getCategoryId());
    }
}
