package com.wakefit.ecommerce.controller;

import com.wakefit.ecommerce.dto.FeedbackDTO;
import com.wakefit.ecommerce.entity.Feedback;
import com.wakefit.ecommerce.entity.Product;
import com.wakefit.ecommerce.entity.User;
import com.wakefit.ecommerce.exception.ResourceNotFoundException;
import com.wakefit.ecommerce.service.FeedbackService;
import com.wakefit.ecommerce.repository.ProductRepository;
import com.wakefit.ecommerce.repository.UserRepository;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v1/feedback")
public class FeedbackController {

    @Autowired
    private FeedbackService feedbackService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ProductRepository productRepository;

    @PostMapping
    public FeedbackDTO addFeedback(@RequestBody FeedbackDTO feedbackDTO) {
        Feedback feedback = convertToEntity(feedbackDTO);
        FeedbackDTO savedFeedback = feedbackService.addFeedback(feedbackDTO);
        return savedFeedback;
    }

    @GetMapping("/{feedbackId}")
    public FeedbackDTO getFeedbackById(@PathVariable Long feedbackId) {
        return feedbackService.getFeedbackById(feedbackId);
    }

    @GetMapping
    public List<FeedbackDTO> getFeedbackList() {
        return feedbackService.findAll();
    }

    @PutMapping("/update/{feedbackId}")
    public FeedbackDTO updateFeedback(@PathVariable Long feedbackId, @RequestBody FeedbackDTO feedbackDTO) {
        return feedbackService.updateFeedback(feedbackId, feedbackDTO);
    }

    @DeleteMapping("/delete/{feedbackId}")
    public void deleteFeedback(@PathVariable Long feedbackId) {
        feedbackService.deleteFeedback(feedbackId);
    }

    private Feedback convertToEntity(FeedbackDTO feedbackDTO) {
        Feedback feedback = new Feedback();
        feedback.setFeedbackId(feedbackDTO.getFeedbackId());
        feedback.setRating(feedbackDTO.getRating());
        feedback.setComment(feedbackDTO.getComment());
        feedback.setFeedbackDate(feedbackDTO.getFeedbackDate());

        // Set User and Product using their IDs
        if (feedbackDTO.getUserId() != null) {
            User user = userRepository.findById(feedbackDTO.getUserId())
                    .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + feedbackDTO.getUserId()));
            feedback.setUser(user);
        }

        if (feedbackDTO.getProductId() != null) {
            Product product = productRepository.findById(feedbackDTO.getProductId())
                    .orElseThrow(() -> new ResourceNotFoundException("Product not found with id: " + feedbackDTO.getProductId()));
            feedback.setProduct(product);
        }

        return feedback;
    }

    private FeedbackDTO convertToDTO(Feedback feedback) {
        return new FeedbackDTO(
            feedback.getFeedbackId(),
            feedback.getRating(),
            feedback.getComment(),
            feedback.getFeedbackDate(),
            feedback.getUser() != null ? feedback.getUser().getUserId() : null,
            feedback.getProduct() != null ? feedback.getProduct().getProductId() : null
        );
    }
}
